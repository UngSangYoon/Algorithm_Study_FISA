"""
백준 1463번 1로 만들기 실버3

문제
정수 X에 사용할 수 있는 연산은 다음과 같이 세 가지 이다.

X가 3으로 나누어 떨어지면, 3으로 나눈다.
X가 2로 나누어 떨어지면, 2로 나눈다.
1을 뺀다.
정수 N이 주어졌을 때, 위와 같은 연산 세 개를 적절히 사용해서 1을 만들려고 한다. 연산을 사용하는 횟수의 최솟값을 출력하시오.

입력
첫째 줄에 1보다 크거나 같고, 106보다 작거나 같은 정수 N이 주어진다.

출력
첫째 줄에 연산을 하는 횟수의 최솟값을 출력한다.
"""

# 첫 시도 코드
# 항상 나눗셈을 먼저 수행해서, 연산 횟수가 많아짐
n = int(input())

count = 0

while n > 1:
    if n % 3 == 0:
        n //= 3
        count += 1
    elif n % 2 == 0:
        n //= 2
        count += 1
    else:
        n -= 1
        count += 1

print(count)

# 동적 계획법 알고리즘으로 풀기
"""
n에서 1로 가는 연산을 "최소화"하기 위해,
n보다 작은 모든 수에서 1로 가는 경우를 미리 계산해둠

1. dp 배열을 준비
    dp[i]: 숫자 i를 1로 만드는 데 필요한 "최소 연산 횟수"를 저장하는 배열임
    ex) dp[10] = 3, 숫자 10을 1로 만드는 데 최소 3번의 연산 필요

2. 계산 규칙
    다음 중 가장 작은 값을 선택함
    dp[i - 1] + 1 -> 1을 빼는 경우
    dp[i // 2] + 1 -> 2로 나눌 수 있는 경우
    dp[i // 3] + 1 -> 3으로 나눌 수 있는 경우

3. 작은 문제부터 차례로 계산
    1부터 시작해서 점점 큰 숫자로 계산을 진행함.
    작은 숫자에서 구한 최솟값을 큰 숫자의 계산에 활용.
"""


n = int(input())

# DP 테이블 초기화 (숫자 1 ~ n까지의 최소 연산 횟수를 저장)
dp = [0] * (n + 1)

# 2부터 n까지 최소 연산 횟수 계산
# 세 가지 경우 중 연산 횟수가 제일 적은 값을 저장함
for i in range(2, n + 1):
    # 이전 숫자에서 1을 뺀 경우
    dp[i] = dp[i - 1] + 1
    # 2로 나누어질 경우 -> 최솟값 갱신
    if i % 2 == 0:
        dp[i] = min(dp[i], dp[i // 2] + 1)
    # 3으로 나누어질 경우 -> 최솟값 갱신
    if i % 3 == 0:
        dp[i] = min(dp[i], dp[i // 3] + 1)

# 결과 출력 (최소 연산 횟수)
print(dp[n])


#핵심: i-1, i//2, i//3 중 최솟값을 선택함

"""
동작 과정
dp[2]:
    1을 빼기 -> dp[1] + 1 = 1
    최솟값: dp[2] = 1 (2를 1로 만드는 최소 연산 횟수: 1)

dp[3]:
    1을 빼기 -> dp[2] + 1 = 2
    3으로 나누기 -> dp[1] + 1 = 1
    최솟값: dp[3] = 1

...

dp[10]:
    1을 빼기 -> dp[9] + 1 = 3
    2로 나누기 -> dp[5] + 1 = 3
    최솟값: dp[10] = 3

"""