"""
백준 9095번 1, 2, 3 더하기 실버3
문제
정수 4를 1, 2, 3의 합으로 나타내는 방법은 총 7가지가 있다. 합을 나타낼 때는 수를 1개 이상 사용해야 한다.

1+1+1+1
1+1+2
1+2+1
2+1+1
2+2
1+3
3+1
정수 n이 주어졌을 때, n을 1, 2, 3의 합으로 나타내는 방법의 수를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 테스트 케이스의 개수 T가 주어진다. 각 테스트 케이스는 한 줄로 이루어져 있고, 정수 n이 주어진다. n은 양수이며 11보다 작다.

출력
각 테스트 케이스마다, n을 1, 2, 3의 합으로 나타내는 방법의 수를 출력한다.
"""

# 1, 2, 3의 합으로 n을 구하는 조합의 수를 구하기

# 첫 시도 코드
# 문제점: (1, 1, 2)와 (2, 1, 1)등의 중복된 조합을 처리하지 못함
"""

t = int(input())
count = 0


while t > 0:
    n = int(input())

    for i in range(n):
        for j in range(n // 2) :
            for k in range(n // 3):
                if (1*i) + (2*j) + (3*k) == n:
                    count += 1

    print(count)
    count = 0
    t -= 1
 """

# 재귀함수 사용해서 풀기 def comb(n, sum)

"""
ex) n = 4
comb(4, 0) 실행 시,
comb(4, 1) + comb(4, 2) + comb(4, 3) 이 실행됨

여기서 comb(4, 1)을 실행하면,
comb(4, 2) + comb(4, 3) + comb(4, 4)로 나뉘어짐

여기서 comb(4, 4)는 조건을 만족하므로 1을 반환함

위의 과정을 반복하여 1, 2, 3의 합이 n이 되는 모든 경우의 수를 구할 수 있음.
"""


# 목표값 n과 현재까지 더한 값을 인자로 받기
def comb(n, sum):     
    # 현재 합이 n과 동일하면 1 반환
    if sum == n:
        return 1

    # 현재 합이 n을 초과하면 0 반환
    if sum > n:
        return 0
    
    # 1, 2, 3을 sum에 각각 더해 재귀함수 호출
    return (
        comb(n, sum + 1) +
        comb(n, sum + 2) +
        comb(n, sum + 3)
    )

# 테스트 횟수 t 만큼 반복
t = int(input())  

for _ in range(t):
    n = int(input())
    print(comb(n, 0))

# 완전 탐색 방법이라 n이 클수록 계산량이 기하급수적으로 증가함.
# 하지만 문제에서 n은 11이하의 수라고 가정하였으므로 적합함.


