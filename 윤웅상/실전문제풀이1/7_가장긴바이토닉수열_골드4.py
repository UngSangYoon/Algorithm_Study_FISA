'''
수열 S가 어떤 수 Sk를 기준으로 S1 < S2 < ... Sk-1 < Sk > Sk+1 > ... SN-1 > SN을 만족한다면, 그 수열을 바이토닉 수열이라고 한다.

예를 들어, {10, 20, 30, 25, 20}과 {10, 20, 30, 40}, {50, 40, 25, 10} 은 바이토닉 수열이지만, {1, 2, 3, 2, 1, 2, 3, 2, 1}과 {10, 20, 30, 40, 20, 30} 은 바이토닉 수열이 아니다.

수열 A가 주어졌을 때, 그 수열의 부분 수열 중 바이토닉 수열이면서 가장 긴 수열의 길이를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 수열 A의 크기 N이 주어지고, 둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ N ≤ 1,000, 1 ≤ Ai ≤ 1,000)

출력
첫째 줄에 수열 A의 부분 수열 중에서 가장 긴 바이토닉 수열의 길이를 출력한다.

예제 입력 1 
10
1 5 2 1 4 3 4 5 2 1
예제 출력 1 
7
'''
# 방법론 1. 브루트포스
# 모든 가능한 수열을 만들어보고 바이토닉 수열인지 확인

# 방법론 2. 그리디 알고리즘
# 가장 큰 수 설정? 
# 그리디한 설정을 정의하기 어려움

# 방법론 3. 다이나믹 프로그래밍
# DP 테이블 정의 (LIS 문제 응용)
# dp1[n] : 첫번째 원소에서 시작해서 n번째 원소에서 끝나는 LIS의 길이
# dp2[n] : N번쨰 원소에서 시작해서 n번째 원소에서 끝나는 LIS의 길이

N = int(input())
arr = [0] + list(map(int, input().split()))

# solve
dp1 = [0] * (N + 1)
dp2 = [0] * (N + 1)
dp1[1] = dp2[N] = 1

# dp1
for n in range(2, N + 1):
	dp1[n] = 1
	for i in range(1, n): # dp1[n] 갱신
		if arr[n] > arr[i]:
			dp1[n] = max(dp1[n], dp1[i] + 1)

# dp2
for n in range(N - 1, 0, -1):
	dp2[n] = 1
	for i in range(N, n, -1): # dp2[n] 갱신
		if arr[n] > arr[i]:
			dp2[n] = max(dp2[n], dp2[i] + 1)

ans = 0
for n in range(1, N + 1):
	ans = max(ans, dp1[n] + dp2[n] - 1)

print(ans)






