'''
1보다 큰 자연수 중에서  1과 자기 자신을 제외한 약수가 없는 자연수를 소수라고 한다. 예를 들어, 5는 1과 5를 제외한 약수가 없기 때문에 소수이다. 하지만, 6은 6 = 2 × 3 이기 때문에 소수가 아니다.
골드바흐의 추측은 유명한 정수론의 미해결 문제로, 2보다 큰 모든 짝수는 두 소수의 합으로 나타낼 수 있다는 것이다. 이러한 수를 골드바흐 수라고 한다. 또, 짝수를 두 소수의 합으로 나타내는 표현을 그 수의 골드바흐 파티션이라고 한다. 예를 들면, 4 = 2 + 2, 6 = 3 + 3, 8 = 3 + 5, 10 = 5 + 5, 12 = 5 + 7, 14 = 3 + 11, 14 = 7 + 7이다. 10000보다 작거나 같은 모든 짝수 n에 대한 골드바흐 파티션은 존재한다.
2보다 큰 짝수 n이 주어졌을 때, n의 골드바흐 파티션을 출력하는 프로그램을 작성하시오. 만약 가능한 n의 골드바흐 파티션이 여러 가지인 경우에는 두 소수의 차이가 가장 작은 것을 출력한다.
'''


T = int(input().strip())

# 2. 10,000 이하 모든 수에 대해 소수 여부를 미리 구해둔다 (에라토스테네스의 체)
max_limit = 10000
sieve = [True] * (max_limit + 1)
sieve[0], sieve[1] = False, False  # 0, 1은 소수가 아님

for i in range(2, int(max_limit**0.5) + 1):
    if sieve[i]:
        for j in range(i*i, max_limit + 1, i):
            sieve[j] = False

# 3. 테스트 케이스 T번 반복
for _ in range(T):
    n = int(input().strip())  # 짝수 n

    # 골드바흐 파티션 찾기
    # -- n//2에서 시작해서 좌우로 이동하면 두 소수의 차이가 최소인 경우를 가장 먼저 찾을 수 있음
    left = n // 2
    right = n // 2

    while True:
        if sieve[left] and sieve[right]:  # 둘 다 소수
            if left + right == n:
                print(left, right)
                break
        left -= 1
        right += 1

'''
입력값이 10000 이하임으로 에라토스테네스의 체를 활용하여 10000개의 소수 판별 체를 만들었습니다.
또한 시간 단축을 위해 골드바흐 파티션을 찾을 때 중간값에서 왼쪽과 오른쪽으로 이진탐색과 비슷한 방법으로 소수를 찾고 합이 n과 같으면 출력하도록 짰습니다.
'''