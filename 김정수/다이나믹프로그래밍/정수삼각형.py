'''
위 그림은 크기가 5인 정수 삼각형의 한 모습이다.

맨 위층 7부터 시작해서 아래에 있는 수 중 하나를 선택하여 아래층으로 내려올 때, 이제까지 선택된 수의 합이 최대가 되는 경로를 구하는 프로그램을 작성하라. 아래층에 있는 수는 현재 층에서 선택된 수의 대각선 왼쪽 또는 대각선 오른쪽에 있는 것 중에서만 선택할 수 있다.

삼각형의 크기는 1 이상 500 이하이다. 삼각형을 이루고 있는 각 수는 모두 정수이며, 범위는 0 이상 9999 이하이다.
'''

n = int(input().strip())
triangle = []
for _ in range(n):
    row = list(map(int, input().split()))
    triangle.append(row)


dp = [[0] * (i+1) for i in range(n)]
dp[0][0] = triangle[0][0]

for i in range(1, n):
    for j in range(i+1):
        if j == 0:
            dp[i][j] = dp[i-1][j] + triangle[i][j]
        elif j == i:
            dp[i][j] = dp[i-1][j-1] + triangle[i][j]
        else:
            dp[i][j] = max(dp[i-1][j-1], dp[i-1][j]) + triangle[i][j]


answer = max(dp[n-1])
print(answer)


'''
1. DP로 문제를 풀어야 하기 때문에 어떻게 DP 테이블을 채울 수 있는지 고민
2. 뭔가 전체 합을 DP 테이블에 입력하고 그 중 max값을 출력하면 될거 같음
3. 전체합을 구하는 것이 쉬워 보이지 않음. 일단 합의 조건은 대각선 왼쪽 또는 대각선 오른쪽에 있는 것 중에서만 선택 가능
4. 이거 숫자들 input을 받을때 전체를 다 한 리스트에 넣고 인덱스를 좀 사용하면 풀리지 않을까?
5. [7, 3, 8, 8, 1, 0, 2, 7, 4, 4, 4, 5, 2, 6, 5]
6. 인덱스가 0, 1, 3, 6 등 +1, +2, +3씩 증가할 때마다 대각선 왼쪽, 대각선 오른쪽 인덱스가 +1,+2  /  +2, +3  / +3, +4 씩 증가하는 규칙이 있네. 근데 너무 복잡하다.
7. 그럼 2차원 배열을 사용해야하나?

triangle:                                  dp:
  [7]                                       [7]
  [3,      8]                               [10,      15]
  [8,      1,      0]                       [18,      16,      15]
  [2,      7,      4,      4]               [20,      25,      20,      19]
  [4,      5,      2,      6,      5]       [24,      30,      27,      26,      24]

'''