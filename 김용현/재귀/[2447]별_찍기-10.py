
"""
재귀에서 가장 중요한 것은 더 이상 쪼갤수 없는 최소의 단위가 뭔지 찾는 것
이것부터 풀이는 시작된다.

***
* *
***

이 최소 단위일 것이라고 가정하고 시작

하지만 이것을 종료 조건으로 설정하기엔 어려움이 있어보임 (왜냐면 종료 조건이 너무 많아지기때문 / 종료조건은 단순할수록 좋다생각)
따라서 *을 최소 단위로 봤음

대신
*으로

***
* *
*** 을 완성시킬 수 있는 규칙을 찾아냄

결국 한개의 단위가

*      에서

***
* *    이 된것임
***

------------------------

그러면

*

다음

***
* *
***

다음

*********
* ** ** *
*********
***   ***
* *   * *
*********
* ** ** *
*********

다음

***************************
* ** ** ** ** ** ** ** ** *
***************************
***   ******   ******   ***
* *   * ** *   * ** *   * *
***   ******   ******   ***
***************************
* ** ** ** ** ** ** ** ** *
***************************
*********         *********
* ** ** *         * ** ** *
*********         *********
***   ***         ***   ***
* *   * *         * *   * *
***   ***         ***   ***
*********         *********
* ** ** *         * ** ** *
*********         *********
***************************
* ** ** ** ** ** ** ** ** *
***************************
***   ******   ******   ***
* *   * ** *   * ** *   * *
***   ******   ******   ***
***************************
* ** ** ** ** ** ** ** ** *
***************************

이 되는 것을 볼 수있음

"""

def generate_star_pattern(n):
    if n == 1:
        # n이 1이 되었을 때는 종료가 됨
        return ["*"]


    smaller_pattern = generate_star_pattern(n // 3)  # n을 3으로 나눈 작은 패턴 생성 n이 27이라면 9의 패턴
    # 밑에 줄을 실행하는 것이 아니라 9의 패턴부터 시작
    # 현재 3의 smaller_pattern에는 * 하나가 저장되어있음
    pattern = []

    for row in smaller_pattern:  # 첫 번째와 세 번째 부분
        pattern.append(row * 3)
    for row in smaller_pattern:  # 중간 부분: 가운데에 공백 추가
        pattern.append(row + " " * (n // 3) + row)
    for row in smaller_pattern:  # 첫 번째와 세 번째 부분 반복
        pattern.append(row * 3)

    return pattern



N = int(input())
result = generate_star_pattern(N)

print("\n".join(result))