'''
가장 긴 바이토닉 부분 수열
 
문제
수열 S가 어떤 수 Sk를 기준으로 S1 < S2 < ... Sk-1 < Sk > Sk+1 > ... SN-1 > SN을 만족한다면, 그 수열을 바이토닉 수열이라고 한다.

예를 들어, {10, 20, 30, 25, 20}과 {10, 20, 30, 40}, {50, 40, 25, 10} 은 바이토닉 수열이지만,
{1, 2, 3, 2, 1, 2, 3, 2, 1}과 {10, 20, 30, 40, 20, 30} 은 바이토닉 수열이 아니다.

수열 A가 주어졌을 때, 그 수열의 부분 수열 중 바이토닉 수열이면서 가장 긴 수열의 길이를 구하는 프로그램을 작성하시오.

입력
첫째 줄에 수열 A의 크기 N이 주어지고, 둘째 줄에는 수열 A를 이루고 있는 Ai가 주어진다. (1 ≤ N ≤ 1,000, 1 ≤ Ai ≤ 1,000)

출력
첫째 줄에 수열 A의 부분 수열 중에서 가장 긴 바이토닉 수열의 길이를 출력한다.
'''

# 풀이
# dp를 이용하여 풀 수 있다.
# dp1[i] = i번째 원소를 마지막으로 하는 증가하는 부분 수열의 길이
# dp2[i] = i번째 원소를 시작으로 하는 감소하는 부분 수열의 길이
# dp1과 dp2를 이용하여 가장 긴 바이토닉 부분 수열을 구할 수 있다.

n = int(input())
a = list(map(int, input().split()))

def solution(n, a):
    dp1 = [1]*n
    dp2 = [1]*n
    # 증가하는 부분 수열
    for i in range(n):
        # i번째 원소를 마지막으로 하는 증가하는 부분 수열의 길이
        for j in range(i): # i번째 원소 이전의 원소들을 확인
            if a[i] > a[j]:
                dp1[i] = max(dp1[i], dp1[j]+1)
    # 감소하는 부분 수열 -> 뒤에서부터 구해야 한다.
    for i in range(n-1, -1, -1):
        # i번째 원소를 시작으로 하는 감소하는 부분 수열의 길이
        for j in range(n-1, i, -1):
            if a[i] > a[j]:
                dp2[i] = max(dp2[i], dp2[j]+1)
    ans = 0
    # 가장 긴 바이토닉 부분 수열
    for i in range(n):
        ans = max(ans, dp1[i]+dp2[i]-1)
    return ans

print(solution(n, a))